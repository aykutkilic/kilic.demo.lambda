/*
 * generated by Xtext
 */
package kilic.demo.arconf.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import kilic.demo.arconf.aRConf.SingleModuleVal
import org.eclipse.emf.ecore.EReference
import kilic.demo.arconf.aRConf.ModuleAsg
import kilic.demo.arconf.aRConf.SingleContainerVal
import org.eclipse.xtext.scoping.Scopes
import kilic.demo.arconf.aRConf.ContainerAsg
import kilic.demo.arconf.aRConf.ContainerDef
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EClass
import kilic.demo.arconf.aRConf.RefVal
import kilic.demo.arconf.aRConf.impl.BasicAsgImpl
import org.eclipse.xtext.EcoreUtil2
import kilic.demo.arconf.aRConf.Repository
import com.google.inject.Inject
import kilic.demo.arconf.semantics.ARConfSemantics
import kilic.demo.arconf.aRConf.RefDef

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class ARConfScopeProvider extends AbstractDeclarativeScopeProvider {
	@Inject
	ARConfSemantics semantics
	
	override def IScope getScope(EObject ctx, EReference ref) {
		System.out.println(ctx.class.simpleName + "-" + ref.name + ":" + (ref.eContainer as EClass)?.name + "-" + ref.EType.name)
		super.getScope(ctx, ref)
	}

	def IScope scope_ContainerValMember_type(SingleModuleVal ctx, EReference ref) {
		val asg =  ctx.eContainer as ModuleAsg
		Scopes.scopeFor(asg.type.containers)
	}
	
	def IScope scope_ContainerValMember_type(SingleContainerVal ctx, EReference ref) {
		val asg = ctx.eContainer as ContainerAsg
		Scopes.scopeFor((asg.type as ContainerDef)?.members)
	}
	
	def IScope scope_RefVal_container(BasicAsgImpl asg, EReference ref) {
		val repo = EcoreUtil2.getContainerOfType(asg, typeof(Repository))
		val allContainerAsgs = repo.eAllContents.filter(ContainerAsg).toList
		val refDef = asg.type as RefDef
		Scopes.scopeFor(allContainerAsgs.filter[it.type==refDef.container])
	}
}
